# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-04-07T19:16:09+00:00

from __future__ import annotations

from typing import Optional

from fastapi import FastAPI, Path, Query, Request

from .models import (
    Alt,
    BatchDeleteRowAccessPoliciesRequest,
    Dataset,
    DatasetList,
    DatasetView,
    FieldXgafv,
    GetIamPolicyRequest,
    GetQueryResultsResponse,
    GetServiceAccountResponse,
    Job,
    JobCancelResponse,
    JobList,
    ListModelsResponse,
    ListRoutinesResponse,
    ListRowAccessPoliciesResponse,
    Model,
    Policy,
    Projection,
    ProjectList,
    QueryRequest,
    QueryResponse,
    Routine,
    RowAccessPolicy,
    SetIamPolicyRequest,
    Table,
    TableDataInsertAllRequest,
    TableDataInsertAllResponse,
    TableDataList,
    TableList,
    TestIamPermissionsRequest,
    TestIamPermissionsResponse,
    UndeleteDatasetRequest, StateFilterEnum, View,
)

app = FastAPI(
    contact={'name': 'Google', 'url': 'https://google.com'},
    description='A data platform for customers to create, manage, share and query data.',
    license={
        'name': 'Creative Commons Attribution 3.0',
        'url': 'http://creativecommons.org/licenses/by/3.0/',
    },
    termsOfService='https://developers.google.com/terms/',
    title='BigQuery API',
    version='v2',
    servers=[{'url': 'https://bigquery.googleapis.com/bigquery/v2'}],
)


@app.get('/projects', response_model=ProjectList, tags=['projects'])
def bigquery_projects_list(
    max_results: Optional[int] = Query(None, alias='maxResults'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = 'json',
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    upload_protocol: Optional[str] = None,
) -> ProjectList:
    pass


@app.get(
    '/projects/{+projectId}/datasets', response_model=DatasetList, tags=['datasets']
)
def bigquery_datasets_list(
    project_id: str = Path(..., alias='projectId'),
    all: Optional[bool] = None,
    filter: Optional[str] = None,
    max_results: Optional[int] = Query(None, alias='maxResults'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = 'json',
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    upload_protocol: Optional[str] = None,
) -> DatasetList:
    pass


@app.post('/projects/{+projectId}/datasets', response_model=Dataset, tags=['datasets'])
def bigquery_datasets_insert(
    project_id: str = Path(..., alias='projectId'),
    access_policy_version: Optional[int] = Query(None, alias='accessPolicyVersion'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = 'json',
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    upload_protocol: Optional[str] = None,
    body: Dataset = None,
) -> Dataset:
    pass


@app.delete(
    '/projects/{+projectId}/datasets/{+datasetId}',
    response_model=None,
    tags=['datasets'],
)
def bigquery_datasets_delete(
    project_id: str = Path(..., alias='projectId'),
    dataset_id: str = Path(..., alias='datasetId'),
    delete_contents: Optional[bool] = Query(None, alias='deleteContents'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = 'json',
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    upload_protocol: Optional[str] = None,
) -> None:
    pass


@app.get(
    '/projects/{+projectId}/datasets/{+datasetId}',
    response_model=Dataset,
    tags=['datasets'],
)
def bigquery_datasets_get(
    project_id: str = Path(..., alias='projectId'),
    dataset_id: str = Path(..., alias='datasetId'),
    access_policy_version: Optional[int] = Query(None, alias='accessPolicyVersion'),
    dataset_view: Optional[DatasetView] = Query(None, alias='datasetView'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = 'json',
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    upload_protocol: Optional[str] = None,
) -> Dataset:
    pass


@app.patch(
    '/projects/{+projectId}/datasets/{+datasetId}',
    response_model=Dataset,
    tags=['datasets'],
)
def bigquery_datasets_patch(
    project_id: str = Path(..., alias='projectId'),
    dataset_id: str = Path(..., alias='datasetId'),
    access_policy_version: Optional[int] = Query(None, alias='accessPolicyVersion'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = 'json',
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    upload_protocol: Optional[str] = None,
    body: Dataset = None,
) -> Dataset:
    pass


@app.put(
    '/projects/{+projectId}/datasets/{+datasetId}',
    response_model=Dataset,
    tags=['datasets'],
)
def bigquery_datasets_update(
    project_id: str = Path(..., alias='projectId'),
    dataset_id: str = Path(..., alias='datasetId'),
    access_policy_version: Optional[int] = Query(None, alias='accessPolicyVersion'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = 'json',
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    upload_protocol: Optional[str] = None,
    body: Dataset = None,
) -> Dataset:
    pass


@app.get(
    '/projects/{+projectId}/datasets/{+datasetId}/models',
    response_model=ListModelsResponse,
    tags=['models'],
)
def bigquery_models_list(
    project_id: str = Path(..., alias='projectId'),
    dataset_id: str = Path(..., alias='datasetId'),
    max_results: Optional[int] = Query(None, alias='maxResults'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = 'json',
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    upload_protocol: Optional[str] = None,
) -> ListModelsResponse:
    pass


@app.delete(
    '/projects/{+projectId}/datasets/{+datasetId}/models/{+modelId}',
    response_model=None,
    tags=['models'],
)
def bigquery_models_delete(
    project_id: str = Path(..., alias='projectId'),
    dataset_id: str = Path(..., alias='datasetId'),
    model_id: str = Path(..., alias='modelId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = 'json',
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    upload_protocol: Optional[str] = None,
) -> None:
    pass


@app.get(
    '/projects/{+projectId}/datasets/{+datasetId}/models/{+modelId}',
    response_model=Model,
    tags=['models'],
)
def bigquery_models_get(
    project_id: str = Path(..., alias='projectId'),
    dataset_id: str = Path(..., alias='datasetId'),
    model_id: str = Path(..., alias='modelId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = 'json',
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    upload_protocol: Optional[str] = None,
) -> Model:
    pass


@app.patch(
    '/projects/{+projectId}/datasets/{+datasetId}/models/{+modelId}',
    response_model=Model,
    tags=['models'],
)
def bigquery_models_patch(
    project_id: str = Path(..., alias='projectId'),
    dataset_id: str = Path(..., alias='datasetId'),
    model_id: str = Path(..., alias='modelId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = 'json',
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    upload_protocol: Optional[str] = None,
    body: Model = None,
) -> Model:
    pass


@app.get(
    '/projects/{+projectId}/datasets/{+datasetId}/routines',
    response_model=ListRoutinesResponse,
    tags=['routines'],
)
def bigquery_routines_list(
    project_id: str = Path(..., alias='projectId'),
    dataset_id: str = Path(..., alias='datasetId'),
    filter: Optional[str] = None,
    max_results: Optional[int] = Query(None, alias='maxResults'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    read_mask: Optional[str] = Query(None, alias='readMask'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = 'json',
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    upload_protocol: Optional[str] = None,
) -> ListRoutinesResponse:
    pass


@app.post(
    '/projects/{+projectId}/datasets/{+datasetId}/routines',
    response_model=Routine,
    tags=['routines'],
)
def bigquery_routines_insert(
    project_id: str = Path(..., alias='projectId'),
    dataset_id: str = Path(..., alias='datasetId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = 'json',
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    upload_protocol: Optional[str] = None,
    body: Routine = None,
) -> Routine:
    pass


@app.delete(
    '/projects/{+projectId}/datasets/{+datasetId}/routines/{+routineId}',
    response_model=None,
    tags=['routines'],
)
def bigquery_routines_delete(
    project_id: str = Path(..., alias='projectId'),
    dataset_id: str = Path(..., alias='datasetId'),
    routine_id: str = Path(..., alias='routineId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = 'json',
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    upload_protocol: Optional[str] = None,
) -> None:
    pass


@app.get(
    '/projects/{+projectId}/datasets/{+datasetId}/routines/{+routineId}',
    response_model=Routine,
    tags=['routines'],
)
def bigquery_routines_get(
    project_id: str = Path(..., alias='projectId'),
    dataset_id: str = Path(..., alias='datasetId'),
    routine_id: str = Path(..., alias='routineId'),
    read_mask: Optional[str] = Query(None, alias='readMask'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = 'json',
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    upload_protocol: Optional[str] = None,
) -> Routine:
    pass


@app.put(
    '/projects/{+projectId}/datasets/{+datasetId}/routines/{+routineId}',
    response_model=Routine,
    tags=['routines'],
)
def bigquery_routines_update(
    project_id: str = Path(..., alias='projectId'),
    dataset_id: str = Path(..., alias='datasetId'),
    routine_id: str = Path(..., alias='routineId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = 'json',
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    upload_protocol: Optional[str] = None,
    body: Routine = None,
) -> Routine:
    pass


@app.get(
    '/projects/{+projectId}/datasets/{+datasetId}/tables',
    response_model=TableList,
    tags=['tables'],
)
def bigquery_tables_list(
    project_id: str = Path(..., alias='projectId'),
    dataset_id: str = Path(..., alias='datasetId'),
    max_results: Optional[int] = Query(None, alias='maxResults'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = 'json',
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    upload_protocol: Optional[str] = None,
) -> TableList:
    pass


@app.post(
    '/projects/{+projectId}/datasets/{+datasetId}/tables',
    response_model=Table,
    tags=['tables'],
)
def bigquery_tables_insert(
    project_id: str = Path(..., alias='projectId'),
    dataset_id: str = Path(..., alias='datasetId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = 'json',
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    upload_protocol: Optional[str] = None,
    body: Table = None,
) -> Table:
    pass


@app.delete(
    '/projects/{+projectId}/datasets/{+datasetId}/tables/{+tableId}',
    response_model=None,
    tags=['tables'],
)
def bigquery_tables_delete(
    project_id: str = Path(..., alias='projectId'),
    dataset_id: str = Path(..., alias='datasetId'),
    table_id: str = Path(..., alias='tableId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = 'json',
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    upload_protocol: Optional[str] = None,
) -> None:
    pass


@app.get(
    '/projects/{+projectId}/datasets/{+datasetId}/tables/{+tableId}',
    response_model=Table,
    tags=['tables'],
)
def bigquery_tables_get(
    project_id: str = Path(..., alias='projectId'),
    dataset_id: str = Path(..., alias='datasetId'),
    table_id: str = Path(..., alias='tableId'),
    selected_fields: Optional[str] = Query(None, alias='selectedFields'),
    view: Optional[View] = None,
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = 'json',
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    upload_protocol: Optional[str] = None,
) -> Table:
    pass


@app.patch(
    '/projects/{+projectId}/datasets/{+datasetId}/tables/{+tableId}',
    response_model=Table,
    tags=['tables'],
)
def bigquery_tables_patch(
    project_id: str = Path(..., alias='projectId'),
    dataset_id: str = Path(..., alias='datasetId'),
    table_id: str = Path(..., alias='tableId'),
    autodetect_schema: Optional[bool] = None,
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = 'json',
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    upload_protocol: Optional[str] = None,
    body: Table = None,
) -> Table:
    pass


@app.put(
    '/projects/{+projectId}/datasets/{+datasetId}/tables/{+tableId}',
    response_model=Table,
    tags=['tables'],
)
def bigquery_tables_update(
    project_id: str = Path(..., alias='projectId'),
    dataset_id: str = Path(..., alias='datasetId'),
    table_id: str = Path(..., alias='tableId'),
    autodetect_schema: Optional[bool] = None,
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = 'json',
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    upload_protocol: Optional[str] = None,
    body: Table = None,
) -> Table:
    pass


@app.get(
    '/projects/{+projectId}/datasets/{+datasetId}/tables/{+tableId}/data',
    response_model=TableDataList,
    tags=['tabledata'],
)
def bigquery_tabledata_list(
    project_id: str = Path(..., alias='projectId'),
    dataset_id: str = Path(..., alias='datasetId'),
    table_id: str = Path(..., alias='tableId'),
    format_options_use_int64_timestamp: Optional[bool] = Query(
        None, alias='formatOptions.useInt64Timestamp'
    ),
    max_results: Optional[int] = Query(None, alias='maxResults'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    selected_fields: Optional[str] = Query(None, alias='selectedFields'),
    start_index: Optional[str] = Query(None, alias='startIndex'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = 'json',
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    upload_protocol: Optional[str] = None,
) -> TableDataList:
    pass


@app.post(
    '/projects/{+projectId}/datasets/{+datasetId}/tables/{+tableId}/insertAll',
    response_model=TableDataInsertAllResponse,
    tags=['tabledata'],
)
def bigquery_tabledata_insert_all(
    project_id: str = Path(..., alias='projectId'),
    dataset_id: str = Path(..., alias='datasetId'),
    table_id: str = Path(..., alias='tableId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = 'json',
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    upload_protocol: Optional[str] = None,
    body: TableDataInsertAllRequest = None,
) -> TableDataInsertAllResponse:
    pass


@app.get(
    '/projects/{+projectId}/datasets/{+datasetId}/tables/{+tableId}/rowAccessPolicies',
    response_model=ListRowAccessPoliciesResponse,
    tags=['rowAccessPolicies'],
)
def bigquery_row_access_policies_list(
    project_id: str = Path(..., alias='projectId'),
    dataset_id: str = Path(..., alias='datasetId'),
    table_id: str = Path(..., alias='tableId'),
    page_size: Optional[int] = Query(None, alias='pageSize'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = 'json',
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    upload_protocol: Optional[str] = None,
) -> ListRowAccessPoliciesResponse:
    pass


@app.post(
    '/projects/{+projectId}/datasets/{+datasetId}/tables/{+tableId}/rowAccessPolicies',
    response_model=RowAccessPolicy,
    tags=['rowAccessPolicies'],
)
def bigquery_row_access_policies_insert(
    project_id: str = Path(..., alias='projectId'),
    dataset_id: str = Path(..., alias='datasetId'),
    table_id: str = Path(..., alias='tableId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = 'json',
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    upload_protocol: Optional[str] = None,
    body: RowAccessPolicy = None,
) -> RowAccessPolicy:
    pass


@app.delete(
    '/projects/{+projectId}/datasets/{+datasetId}/tables/{+tableId}/rowAccessPolicies/{+policyId}',
    response_model=None,
    tags=['rowAccessPolicies'],
)
def bigquery_row_access_policies_delete(
    project_id: str = Path(..., alias='projectId'),
    dataset_id: str = Path(..., alias='datasetId'),
    table_id: str = Path(..., alias='tableId'),
    policy_id: str = Path(..., alias='policyId'),
    force: Optional[bool] = None,
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = 'json',
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    upload_protocol: Optional[str] = None,
) -> None:
    pass


@app.get(
    '/projects/{+projectId}/datasets/{+datasetId}/tables/{+tableId}/rowAccessPolicies/{+policyId}',
    response_model=RowAccessPolicy,
    tags=['rowAccessPolicies'],
)
def bigquery_row_access_policies_get(
    project_id: str = Path(..., alias='projectId'),
    dataset_id: str = Path(..., alias='datasetId'),
    table_id: str = Path(..., alias='tableId'),
    policy_id: str = Path(..., alias='policyId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = 'json',
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    upload_protocol: Optional[str] = None,
) -> RowAccessPolicy:
    pass


@app.put(
    '/projects/{+projectId}/datasets/{+datasetId}/tables/{+tableId}/rowAccessPolicies/{+policyId}',
    response_model=RowAccessPolicy,
    tags=['rowAccessPolicies'],
)
def bigquery_row_access_policies_update(
    project_id: str = Path(..., alias='projectId'),
    dataset_id: str = Path(..., alias='datasetId'),
    table_id: str = Path(..., alias='tableId'),
    policy_id: str = Path(..., alias='policyId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = 'json',
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    upload_protocol: Optional[str] = None,
    body: RowAccessPolicy = None,
) -> RowAccessPolicy:
    pass


@app.post(
    '/projects/{+projectId}/datasets/{+datasetId}/tables/{+tableId}/rowAccessPolicies:batchDelete',
    response_model=None,
    tags=['rowAccessPolicies'],
)
def bigquery_row_access_policies_batch_delete(
    project_id: str = Path(..., alias='projectId'),
    dataset_id: str = Path(..., alias='datasetId'),
    table_id: str = Path(..., alias='tableId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = 'json',
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    upload_protocol: Optional[str] = None,
    body: BatchDeleteRowAccessPoliciesRequest = None,
) -> None:
    pass


@app.post(
    '/projects/{+projectId}/datasets/{+datasetId}:undelete',
    response_model=Dataset,
    tags=['datasets'],
)
def bigquery_datasets_undelete(
    project_id: str = Path(..., alias='projectId'),
    dataset_id: str = Path(..., alias='datasetId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = 'json',
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    upload_protocol: Optional[str] = None,
    body: UndeleteDatasetRequest = None,
) -> Dataset:
    pass


@app.get('/projects/{+projectId}/jobs', response_model=JobList, tags=['jobs'])
def bigquery_jobs_list(
    project_id: str = Path(..., alias='projectId'),
    all_users: Optional[bool] = Query(None, alias='allUsers'),
    max_creation_time: Optional[str] = Query(None, alias='maxCreationTime'),
    max_results: Optional[int] = Query(None, alias='maxResults'),
    min_creation_time: Optional[str] = Query(None, alias='minCreationTime'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    parent_job_id: Optional[str] = Query(None, alias='parentJobId'),
    projection: Optional[Projection] = None,
    state_filter: Optional[list[StateFilterEnum]] = Query(None, alias='stateFilter'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = 'json',
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    upload_protocol: Optional[str] = None,
) -> JobList:
    pass


@app.post('/projects/{+projectId}/jobs', response_model=Job, tags=['jobs'])
def bigquery_jobs_insert(
    project_id: str = Path(..., alias='projectId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = 'json',
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    upload_protocol: Optional[str] = None,
    request: Request = ...,
) -> Job:
    pass


@app.get('/projects/{+projectId}/jobs/{+jobId}', response_model=Job, tags=['jobs'])
def bigquery_jobs_get(
    project_id: str = Path(..., alias='projectId'),
    job_id: str = Path(..., alias='jobId'),
    location: Optional[str] = None,
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = 'json',
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    upload_protocol: Optional[str] = None,
) -> Job:
    pass


@app.post(
    '/projects/{+projectId}/jobs/{+jobId}/cancel',
    response_model=JobCancelResponse,
    tags=['jobs'],
)
def bigquery_jobs_cancel(
    project_id: str = Path(..., alias='projectId'),
    job_id: str = Path(..., alias='jobId'),
    location: Optional[str] = None,
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = 'json',
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    upload_protocol: Optional[str] = None,
) -> JobCancelResponse:
    pass


@app.delete(
    '/projects/{+projectId}/jobs/{+jobId}/delete', response_model=None, tags=['jobs']
)
def bigquery_jobs_delete(
    project_id: str = Path(..., alias='projectId'),
    job_id: str = Path(..., alias='jobId'),
    location: Optional[str] = None,
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = 'json',
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    upload_protocol: Optional[str] = None,
) -> None:
    pass


@app.post('/projects/{+projectId}/queries', response_model=QueryResponse, tags=['jobs'])
def bigquery_jobs_query(
    project_id: str = Path(..., alias='projectId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = 'json',
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    upload_protocol: Optional[str] = None,
    body: QueryRequest = None,
) -> QueryResponse:
    pass


@app.get(
    '/projects/{+projectId}/queries/{+jobId}',
    response_model=GetQueryResultsResponse,
    tags=['jobs'],
)
def bigquery_jobs_get_query_results(
    project_id: str = Path(..., alias='projectId'),
    job_id: str = Path(..., alias='jobId'),
    format_options_use_int64_timestamp: Optional[bool] = Query(
        None, alias='formatOptions.useInt64Timestamp'
    ),
    location: Optional[str] = None,
    max_results: Optional[int] = Query(None, alias='maxResults'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    start_index: Optional[str] = Query(None, alias='startIndex'),
    timeout_ms: Optional[int] = Query(None, alias='timeoutMs'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = 'json',
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    upload_protocol: Optional[str] = None,
) -> GetQueryResultsResponse:
    pass


@app.get(
    '/projects/{+projectId}/serviceAccount',
    response_model=GetServiceAccountResponse,
    tags=['projects'],
)
def bigquery_projects_get_service_account(
    project_id: str = Path(..., alias='projectId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = 'json',
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    upload_protocol: Optional[str] = None,
) -> GetServiceAccountResponse:
    pass


@app.post('/{+resource}:getIamPolicy', response_model=Policy, tags=['tables'])
def bigquery_tables_get_iam_policy(
    resource: str,
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = 'json',
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    upload_protocol: Optional[str] = None,
    body: GetIamPolicyRequest = None,
) -> Policy:
    pass


@app.post('/{+resource}:setIamPolicy', response_model=Policy, tags=['tables'])
def bigquery_tables_set_iam_policy(
    resource: str,
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = 'json',
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    upload_protocol: Optional[str] = None,
    body: SetIamPolicyRequest = None,
) -> Policy:
    pass


@app.post(
    '/{+resource}:testIamPermissions',
    response_model=TestIamPermissionsResponse,
    tags=['tables'],
)
def bigquery_tables_test_iam_permissions(
    resource: str,
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = 'json',
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    upload_protocol: Optional[str] = None,
    body: TestIamPermissionsRequest = None,
) -> TestIamPermissionsResponse:
    pass
